-- Table for Products
CREATE TABLE `products` (
    `id` VARCHAR(50) PRIMARY KEY NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `type` VARCHAR(100) NOT NULL,
    `size` VARCHAR(50) NOT NULL,
    `price` DECIMAL(10, 2) NOT NULL,
    `stock` INT NOT NULL DEFAULT 0,
    `status` VARCHAR(20) NOT NULL DEFAULT 'active' -- 'active' or 'archived'
);

-- Table for Sales
CREATE TABLE `sales` (
    `sale_id` VARCHAR(50) PRIMARY KEY NOT NULL,
    `product_id` VARCHAR(50) NOT NULL,
    `quantity` INT NOT NULL,
    `sale_date` DATE NOT NULL,
    -- Add a foreign key constraint to link sales to products
    FOREIGN KEY (`product_id`) REFERENCES `products`(`id`) ON DELETE CASCADE
);

-- New Table for Orders
-- This table will hold the main details for each customer order.
CREATE TABLE `orders` (
    `order_id` VARCHAR(50) PRIMARY KEY NOT NULL,
    `order_date` DATE NOT NULL,
    `customer_name` VARCHAR(255) NOT NULL,
    `total_amount` DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    `status` VARCHAR(50) NOT NULL DEFAULT 'Pending' -- e.g., 'Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'
);

-- New Table for Order Items (Junction Table)
-- This table links products to orders and specifies the quantity of each product in an order.
-- It's crucial for handling orders with multiple different products.
CREATE TABLE `order_items` (
    `item_id` VARCHAR(50) PRIMARY KEY NOT NULL,
    `order_id` VARCHAR(50) NOT NULL,
    `product_id` VARCHAR(50) NOT NULL,
    `quantity` INT NOT NULL,
    `price_at_order` DECIMAL(10, 2) NOT NULL, -- Price of the product at the time of order
    FOREIGN KEY (`order_id`) REFERENCES `orders`(`order_id`) ON DELETE CASCADE,
    FOREIGN KEY (`product_id`) REFERENCES `products`(`id`) ON DELETE RESTRICT -- Prevent deleting a product if it's in an active order
);